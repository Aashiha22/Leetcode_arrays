/*We are given a list nums of integers representing a list compressed with run-length encoding.

Consider each adjacent pair of elements [a, b] = [nums[2*i], nums[2*i+1]] (with i >= 0).  For each such pair, there are a elements with value b in the decompressed list.

Return the decompressed list.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [2,4,4,4]
Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].
The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].
At the end the concatenation [2] + [4,4,4,4] is [2,4,4,4].
 

Constraints:

2 <= nums.length <= 100
nums.length % 2 == 0
1 <= nums[i] <= 100
*/

import java.util.*;

class Solution 
{
    public int[] decompressRLElist(int[] nums) 
    {
        int i;
        ArrayList<Integer> new_nums = new ArrayList<Integer>();
        for(i = 1; i< nums.length; i = i+2)
        {
            int rep = nums[i-1];
            System.out.println("rep "+rep);
            while(rep > 0)
            {
                new_nums.add(nums[i]);
                rep--;
            }
        }
        int[] out_array = new int[new_nums.size()];
        i = 0;
        while(i < new_nums.size())
        {
            out_array[i] = new_nums.get(i);
            i++;
        }
        return out_array;
    }
}
